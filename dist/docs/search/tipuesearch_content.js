var tipuesearch = {"pages":[{"title":"Changelog","text":"Added\n\n\n--config= to the CLI for alt configuration file loading.  Usage: --config=\/path\/to\/core-config.sh\n\n\nChanged\n\n\nMinimum PHP is now 7.4\n\n\n\n\nAdded\n\n\nSupport for HTML comments frontmatter.\n\n\n\n\nAdded\n\n\nNew config not_source_do_not_edit__md which prepends a header to README.md and CHANGELOG.md if set. See install\/core-config.sh for more info.\n\n\n\n\nChanged\n\n\nMinimum PHP is now 7.1\n\n\n\n\n\nAdded internal linking.\nChanged the output width from 1024px to 800px. To go back you need to custom theme your docs.\n\n\n\n\n\nReduced default polling for watch.php from 20 to 2.\nRemoved the sort key from the json outlines.\nAdded support for includes for files ending in .twig.md.\nTodos are only compiled if you enable them in outline.merge.json.\nTodos are now present as an include file, not as a page. Therefore you must both enable aggregation and use an include expression in a file. See documentation for more info.\n\n\n\n\n\nPOSSIBLE BREAKING CHANGE: Added Deny from All to the .htaccess for public_html pattern. If this breaks your compile, use a post compile hook to overwrite the default .htaccess file; see hooks\/htaccess.sh for an example of how to do this. Be sure to register the hook file in core-config.sh in the post_hooks section, or it won't be called.\n\n\n\n\n\nRemoved support for kit templates. Now using Twig templates.\nLost iframe support; plans to bring it back in future.\n\n\n\n\n\nRemoved all traces of doxygene due to no plans for implementation.\n\n\n\n\n\nAPI CHANGE: auto-generated.outline.json is now called outline.auto.json\n\n\n\n\n\nBREAKING CHANGE: The paths in the config var README are now relative to the directory that contains core-config.sh, not the source folder.","tags":"","url":"CHANGELOG.html"},{"title":"Loft Docs","text":"Write your documentation in markdown.  Loft Docs will compile it for you in various formats.  Manage all your documentation needs using a single API.  Easily extended for advanced output scenarios.\n\nVisit https:\/\/aklump.github.io\/loft_docs for full documentation.\n\n\n\n\nSupport for Advanced Markdown.\nText search.\nGenerate complete web sites.\nGenerate Advanced Help for Drupal files.\nFully themable using Twig.\nHook into compilation to provide dynamic content such as class method cheatsheets.\nTasklist aggregation.\n\n\n\n\n\n\n\nIn order to use the text format you must have Lynx installed.\n\n\n\n\nIf you find this project useful... please consider making a donation.\n\n\n\n\nlorem\nipsum\n\n\n\n\n\nCreate pages in source\/ as markdown files.\nAdd images to source\/images\/.\nCompile your documention.\nRead your documentation at docs\/index.html.\n\n\n\n\nLoft Docs provides a core update feature as seen below.  From the root directory type:\n\n.\/core\/update","tags":"","url":"README.html"},{"title":"Dynamic Source File","text":"This file was created in \/Users\/aklump\/Code\/Packages\/bash\/loft_docs\/hooks\/pre_compile.php","tags":"","url":"demos--dynamic-source-file.html"},{"title":"Demos  Empty File","text":"","tags":"","url":"demos--empty-file.html"},{"title":"Demo: An Example Page with Images","text":"A beautiful light ray:","tags":"","url":"demos--example.html"},{"title":"Demo: Include Files","text":"The following headline is created during compile by hooks\/pre_compile.php, which generates a dynamic include file core\/cache\/source\/_headline.md that is inserted here:\n\n\n\nAnd the following table is defined in a partial in source\/_table.md.\n\n\n\n\n  Key\n  Value\n\n\n\n\n  Size\n  large\n\n\n  Shape\n  square","tags":"","url":"demos--includes.html"},{"title":"Demo: Link to Other Pages","text":"This demonstrates how to do internal linking to pages and sections on a page.\n\nThis link will go to the top of the page.\n\nThis link will go to a section on the page.","tags":"","url":"demos--linkfrom.html"},{"title":"Demo: Link Destination Page","text":"Go back to the first page\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.\n\nFusce vel sapien quis orci feugiat accumsan vel sit amet massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nunc varius turpis vel placerat eleifend. Vivamus tempus enim quam, sit amet porta libero efficitur ac. Maecenas ultricies, felis id vulputate consectetur, ligula ligula tempor augue, et feugiat sapien ante sit amet dui. Morbi ullamcorper justo nec purus cursus ullamcorper. Sed semper dictum tellus, vel varius metus pellentesque eu. Ut interdum tristique finibus. In pharetra nibh a malesuada dignissim. Etiam a interdum orci. Maecenas ultricies porttitor neque. Quisque sit amet tincidunt nulla, ut aliquam mauris. Pellentesque ut efficitur eros. Aenean vestibulum aliquet odio, quis pellentesque mauris congue id. Aenean vitae turpis id sapien sollicitudin blandit.\n\nPraesent at vulputate tellus, vehicula dignissim elit. Interdum et malesuada fames ac ante ipsum primis in faucibus. In molestie est sapien, sit amet porttitor ipsum laoreet sit amet. Praesent lacus neque, suscipit quis urna non, varius consequat justo. Curabitur tincidunt leo ac venenatis pharetra. Curabitur ultricies odio ut nibh viverra lobortis. Sed scelerisque pellentesque vehicula.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.\n\nFusce vel sapien quis orci feugiat accumsan vel sit amet massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nunc varius turpis vel placerat eleifend. Vivamus tempus enim quam, sit amet porta libero efficitur ac. Maecenas ultricies, felis id vulputate consectetur, ligula ligula tempor augue, et feugiat sapien ante sit amet dui. Morbi ullamcorper justo nec purus cursus ullamcorper. Sed semper dictum tellus, vel varius metus pellentesque eu. Ut interdum tristique finibus. In pharetra nibh a malesuada dignissim. Etiam a interdum orci. Maecenas ultricies porttitor neque. Quisque sit amet tincidunt nulla, ut aliquam mauris. Pellentesque ut efficitur eros. Aenean vestibulum aliquet odio, quis pellentesque mauris congue id. Aenean vitae turpis id sapien sollicitudin blandit.\n\nPraesent at vulputate tellus, vehicula dignissim elit. Interdum et malesuada fames ac ante ipsum primis in faucibus. In molestie est sapien, sit amet porttitor ipsum laoreet sit amet. Praesent lacus neque, suscipit quis urna non, varius consequat justo. Curabitur tincidunt leo ac venenatis pharetra. Curabitur ultricies odio ut nibh viverra lobortis. Sed scelerisque pellentesque vehicula.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.\n\nFusce vel sapien quis orci feugiat accumsan vel sit amet massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nunc varius turpis vel placerat eleifend. Vivamus tempus enim quam, sit amet porta libero efficitur ac. Maecenas ultricies, felis id vulputate consectetur, ligula ligula tempor augue, et feugiat sapien ante sit amet dui. Morbi ullamcorper justo nec purus cursus ullamcorper. Sed semper dictum tellus, vel varius metus pellentesque eu. Ut interdum tristique finibus. In pharetra nibh a malesuada dignissim. Etiam a interdum orci. Maecenas ultricies porttitor neque. Quisque sit amet tincidunt nulla, ut aliquam mauris. Pellentesque ut efficitur eros. Aenean vestibulum aliquet odio, quis pellentesque mauris congue id. Aenean vitae turpis id sapien sollicitudin blandit.\n\nPraesent at vulputate tellus, vehicula dignissim elit. Interdum et malesuada fames ac ante ipsum primis in faucibus. In molestie est sapien, sit amet porttitor ipsum laoreet sit amet. Praesent lacus neque, suscipit quis urna non, varius consequat justo. Curabitur tincidunt leo ac venenatis pharetra. Curabitur ultricies odio ut nibh viverra lobortis. Sed scelerisque pellentesque vehicula.\n\nSome Extra Information\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.\n\nFusce vel sapien quis orci feugiat accumsan vel sit amet massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nunc varius turpis vel placerat eleifend. Vivamus tempus enim quam, sit amet porta libero efficitur ac. Maecenas ultricies, felis id vulputate consectetur, ligula ligula tempor augue, et feugiat sapien ante sit amet dui. Morbi ullamcorper justo nec purus cursus ullamcorper. Sed semper dictum tellus, vel varius metus pellentesque eu. Ut interdum tristique finibus. In pharetra nibh a malesuada dignissim. Etiam a interdum orci. Maecenas ultricies porttitor neque. Quisque sit amet tincidunt nulla, ut aliquam mauris. Pellentesque ut efficitur eros. Aenean vestibulum aliquet odio, quis pellentesque mauris congue id. Aenean vitae turpis id sapien sollicitudin blandit.\n\nPraesent at vulputate tellus, vehicula dignissim elit. Interdum et malesuada fames ac ante ipsum primis in faucibus. In molestie est sapien, sit amet porttitor ipsum laoreet sit amet. Praesent lacus neque, suscipit quis urna non, varius consequat justo. Curabitur tincidunt leo ac venenatis pharetra. Curabitur ultricies odio ut nibh viverra lobortis. Sed scelerisque pellentesque vehicula.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.\n\nFusce vel sapien quis orci feugiat accumsan vel sit amet massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nunc varius turpis vel placerat eleifend. Vivamus tempus enim quam, sit amet porta libero efficitur ac. Maecenas ultricies, felis id vulputate consectetur, ligula ligula tempor augue, et feugiat sapien ante sit amet dui. Morbi ullamcorper justo nec purus cursus ullamcorper. Sed semper dictum tellus, vel varius metus pellentesque eu. Ut interdum tristique finibus. In pharetra nibh a malesuada dignissim. Etiam a interdum orci. Maecenas ultricies porttitor neque. Quisque sit amet tincidunt nulla, ut aliquam mauris. Pellentesque ut efficitur eros. Aenean vestibulum aliquet odio, quis pellentesque mauris congue id. Aenean vitae turpis id sapien sollicitudin blandit.\n\nPraesent at vulputate tellus, vehicula dignissim elit. Interdum et malesuada fames ac ante ipsum primis in faucibus. In molestie est sapien, sit amet porttitor ipsum laoreet sit amet. Praesent lacus neque, suscipit quis urna non, varius consequat justo. Curabitur tincidunt leo ac venenatis pharetra. Curabitur ultricies odio ut nibh viverra lobortis. Sed scelerisque pellentesque vehicula.","tags":"","url":"demos--linkto.html"},{"title":"Markdown Extra Demonstration Page","text":"This page has markdown extra stuff...\n\n\n\n\n\n\n  do\n  re\n\n\n\n\n  C\n  D\n\n\n\n\n\n\n\n[ ] This task (which uses Markdown Extra todo syntax) will get aggregated automatically @w10","tags":"","url":"demos--md_extra.html"},{"title":"Level One","text":"Italic text\n\nBold text\n\nBold and Italic text\n\n\n\n\ndo\nre\nmi\nfa\n\n\nLevel Three\n\n\nuno\ndos\ntres\nquatro\n\n\nLevel Four\n\nWhat does it do with &lt;?php echo 'this text';?&gt;?\n\n10 print 'hello'\n20 goto 10\n\n\nLevel Five\n\ngoogle\n\nLevel Six\n\n\n\n\n\nUse WhatSize appt o locate larger ~Sites\/*\nGo through and replace older .screenflow movies with their derivative .mov files\nDelete the contents of the files folders on old sites that are no longer active\nGo through and zip legacy folders\nRemove older database snapshots","tags":"","url":"demos--mediawiki.html"},{"title":"Demos No Index","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla at massa sed nulla consectetur malesuada. Aliquam a sapien non sem rhoncus bibendum quis eu tellus. Nunc luctus fermentum volutpat. Praesent tortor diam, sodales ornare facilisis sit amet, consequat nec elit. Aenean at porttitor purus. Phasellus tempus congue suscipit. Vivamus in magna ante, ut cursus mi. Quisque vel ante in massa pretium condimentum non id risus. Vivamus at felis eu enim egestas feugiat ut sit amet arcu. Nunc eu malesuada nunc. Nam felis lectus, convallis eu commodo eget, vehicula quis sem. Nulla egestas bibendum consequat. Pellentesque tristique lacus at leo dapibus pulvinar.","tags":"","url":"demos--no-index.html"},{"title":"Demos  No Title","text":"This page should not have a title derived from the markdown.","tags":"","url":"demos--no-title.html"},{"title":"Demo: Todo List","text":"Here are the todo items for this project.  You should see at least 12 todo items.\n\n\n[ ] demos--todos-b: Echo\n[ ] ld--todos: a task list item\n[ ] demos--todos-a: Charlie\n[ ] demos--todos-a: Bravo\n[ ] demos--todos-a: Alpha\n[ ] ld--todos: a task list item @w-10\n[ ] demos--todos-b: Foxtrot\n[ ] ld--todos: another task\n[ ] demos--todos-c: Lima\n[ ] demos--todos-c: Kilo\n[ ] demos--todos-c: Juliette\n[ ] demos--todos-c: India\n[ ] demos--todos-b: Hotel\n[ ] demos--todos-b: Golf\n[ ] demos--todos-a: Delta\n[ ] demos--md_extra: This task (which uses Markdown Extra todo syntax) will get aggregated automatically @w10\n[ ] ld--todos: a task list item @w10\n[ ] ld--todos: a task list item @w10.1","tags":"","url":"demos--tasklist.html"},{"title":"A Title That is Not Used in the Index","text":"In the TOC and Nav this page should have the title Demo: The Sniffed Title, however when viewed on the page, the content title should be A Title That is Not Used in the Index.","tags":"","url":"demos--title.html"},{"title":"Demo: Todo List Aggregation 1 of 3","text":"[ ] Alpha\n[ ] Bravo\n\n\n\n\n\n[ ] Charlie\n[ ] Delta","tags":"","url":"demos--todos-a.html"},{"title":"Demo: Todo List Aggregation 2 of 3","text":"[ ] Echo\n[ ] Foxtrot\n\n\n\n\n\n[ ] Golf\n[ ] Hotel","tags":"","url":"demos--todos-b.html"},{"title":"Demo: Todo List Aggregation 3 of 3","text":"[ ] India\n[ ] Juliette\n\n\n\n\n\n[ ] Kilo\n[ ] Lima","tags":"","url":"demos--todos-c.html"},{"title":"Demo: Twig Variable Replacement","text":"The following paragraph should be lorem ipsum text:\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.\n\nFusce vel sapien quis orci feugiat accumsan vel sit amet massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nunc varius turpis vel placerat eleifend. Vivamus tempus enim quam, sit amet porta libero efficitur ac. Maecenas ultricies, felis id vulputate consectetur, ligula ligula tempor augue, et feugiat sapien ante sit amet dui. Morbi ullamcorper justo nec purus cursus ullamcorper. Sed semper dictum tellus, vel varius metus pellentesque eu. Ut interdum tristique finibus. In pharetra nibh a malesuada dignissim. Etiam a interdum orci. Maecenas ultricies porttitor neque. Quisque sit amet tincidunt nulla, ut aliquam mauris. Pellentesque ut efficitur eros. Aenean vestibulum aliquet odio, quis pellentesque mauris congue id. Aenean vitae turpis id sapien sollicitudin blandit.\n\nPraesent at vulputate tellus, vehicula dignissim elit. Interdum et malesuada fames ac ante ipsum primis in faucibus. In molestie est sapien, sit amet porttitor ipsum laoreet sit amet. Praesent lacus neque, suscipit quis urna non, varius consequat justo. Curabitur tincidunt leo ac venenatis pharetra. Curabitur ultricies odio ut nibh viverra lobortis. Sed scelerisque pellentesque vehicula.","tags":"","url":"demos--twig-vars.html"},{"title":"How to install","text":"Run the compile command, the first time it is runned, installation takes place.\n\n.\/core\/compile\n\nThe necessary dirs will be created including these configuration file(s):\n\ncore-config.sh\n\nOpen and edit core-config.sh. You should not delete this file once it's been created, as it is the flag that installation has taken place! Compiling without this file may lead to some\/all of your files being deleted.\nEnter the name of the drupal module this will be used for, if applicable.\nEnter the credentials for the drupal site if using iframes.\nOverride the php path if needed; php must have the curl library installed.\nRun .\/core\/compile once more to update the configuration.\nTest the installation by visiting public_html\/index.html in a browser, this is the webpage output and should show you a few example pages.\nInstallation is complete; you may now begin documenting in source. You most likely should first delete the example files in source.\n\n\n\n\n\n\nHere's a quick way to get Lynx on a mac...\nDownload this application http:\/\/habilis.net\/lynxlet\/\nIn shell type cd \/usr\/bin\nFollowed by sudo ln -s \/Applications\/Lynxlet.app\/Contents\/Resources\/lynx\/bin\/lynx\nTest your installation with this command lynx; you should see the lynx browser show up.\n\n\n\n\n\nbrew install lynx\n\n\n\n\n\n\nHow you incorporate Loft Docs is up to you, but there are two scenarios which will be described here, with suggested installation instructions.\n\n\n\n\nCopy the contents of \/dist into your project.\nFrom within dist, in the shell, run .\/core\/compile.\nOpen dist\/public_html\/welcome.html and follow instructions.\n\n\n\n\nIf your goal is simply to document something, and these files will not integrate into another larger project (think git repo), then this is a stand-alone installation.  This would also be the case where you're using Loft Docs to build a website.  Loft Docs' root is the root of your project.  Here's the minimum file structure of a stand-alone implementation:\n\n\/.gitignore\n\/core\n\/core-config.sh\n\/core-version.info\n\/public_html\n\/source\n\/stand_alone.info\n\n\nIn this scenario the version string of your project is contained in \/stand_alone.info which is one level above Loft Docs' core, and so your config file would contain this line:\n\nversion_file = \"..\/web_package.info\"\n\n\nOr, for greater flexibility (so long as you've only one .info file), it could be:\n\nversion_file = \"..\/*.info\"\n\n\nIf you were to host this as a website, public_html is your web root.\n\n\n\nIf you are installing Loft Docs inside the existing code of a larger project, then this constitutes an integrated installation.  Loft Docs is not the root of the larger project, but a sub-folder, maybe you call it docs and store it in the root of the other project.\n\n\/docs\/core\n\/other_project_file1\n\/other_project_file2\n\/other_project_file3\n\/web_package.info\n\n\nIn this scenario the version string of your project is contained in \/web_package.info which is one levels above Loft Docs, and so your config file would contain this line:\n\nversion_file = \"..\/web_package.info\"\n\n\nOr, for greater flexibility (so long as you've only one .info file), it could be:\n\nversion_file = \"..\/*.info\"","tags":"","url":"installation.html"},{"title":"Using API Blueprint","text":"Loft Docs understands API Blueprint when you follow these conventions:\n\n\nInstall Aglio on your system.\nCreate a hook file and register it in core-config.sh; here is an example named hooks\/apib.php.  Point Loft Docs to your installation of Aglio.  Optionally, pass in some configuration options.\n\n&lt;?php\n\n\/**\n * @file\n * Compile the APIBlueprint Snippets.\n *\n * @link https:\/\/github.com\/danielgtaylor\/aglio\n *\/\n\n$apib\n  -&gt;setAglio('\/usr\/local\/bin\/aglio', [\n    '--theme-full-width',\n  ])\n  -&gt;compile();\n\nIn the source directory create &#95;apib.twig.md with something like the following; this will be the master page for the documentation.  In it, use the token {{ apib.resources }} to indicate where the resource markup should appear.\n\nFORMAT: 1A\nHOST: http:\/\/www.my-app.com\/api\/v1\n\n# My Cool App\n\nThis API is a very helpful resource for my users.\n\n{{ apib.resources }}\n\nCreate a folder adjacent to source\/ called apib\/.  This for your resource files.\n\napib\n\u251c\u2500\u2500 companies.apib\n\u251c\u2500\u2500 files.apib\n\u2514\u2500\u2500 persons.apib\nsource\n\u251c\u2500\u2500 _apib.twig.md\n\u251c\u2500\u2500 apib.html (this file is created automatically)\n\u2514\u2500\u2500 api.md\n\nIn apib\/ create files, e.g. companies.apib, files.apib, persons.apib, which represent your API resources following the API Blueprint specification.  Refer to these examples for more info.  Refer to the code example below: An Example Resource.\nLastly create a wrapper page that uses an iframe and place it in source, e.g. api.md with at least a title and a reference iframe.  You may add other content as desired.\n\n# API Documentation\n\n&lt;a href=\"apib.html\" target=\"_blank\"&gt;open in a new window&lt;\/a&gt;\n&lt;iframe src=\"apib.html\" height=\"1200\"&gt;&lt;\/iframe&gt;\n\nDo not create source\/apib.md nor source\/apib.html, as these are reserved.\nWith all of that complete, when you compile, your valid API Blueprint docs will be compiled into your documentation.\n\n\n\n\nFORMAT: 1A\nHOST: https:\/\/alpha-api.app.net\n\n# Real World API\nThis API Blueprint demonstrates a real world example documenting a portion of\n[App.net API](http:\/\/developers.app.net).\n\nNOTE: This document is a **work in progress**.\n\n# Group Posts\nThis section groups App.net post resources.\n\n## Post [\/stream\/0\/posts\/{post_id}]\nA Post is the other central object utilized by the App.net Stream API. It has\nrich text and annotations which comprise all of the content a users sees in\ntheir feed. Posts are closely tied to the follow graph...\n\n+ Parameters\n    + post_id: `1` (string) - The id of the Post.\n\n+ Model (application\/json)\n\n    ```js\n    {\n        \"data\": {\n            \"id\": \"1\", \/\/ note this is a string\n            \"user\": {\n                ...\n            },\n            \"created_at\": \"2012-07-16T17:25:47Z\",\n            \"text\": \"@berg FIRST post on this new site #newsocialnetwork\",\n            \"html\": \"@berg FIRST post on this new site #newsocialnetwork.\",\n            \"source\": {\n                \"client_id\": \"udxGzAVBdXwGtkHmvswR5MbMEeVnq6n4\",\n                \"name\": \"Clientastic for iOS\",\n                \"link\": \"http:\/\/app.net\"\n            },\n            \"machine_only\": false,\n            \"reply_to\": null,\n            \"thread_id\": \"1\",\n            \"num_replies\": 3,\n            \"num_reposts\": 0,\n            \"num_stars\": 0,\n            \"entities\": {\n                \"mentions\": [{\n                    \"name\": \"berg\",\n                    \"id\": \"2\",\n                    \"pos\": 0,\n                    \"len\": 5\n                }],\n                \"hashtags\": [{\n                    \"name\": \"newsocialnetwork\",\n                    \"pos\": 34,\n                    \"len\": 17\n                }],\n                \"links\": [{\n                    \"text\": \"this new site\",\n                    \"url\": \"https:\/\/join.app.net\"\n                    \"pos\": 20,\n                    \"len\": 13\n                }]\n            },\n            \"you_reposted\": false,\n            \"you_starred\": false\n        },\n        \"meta\": {\n            \"code\": 200,\n        }\n    }\n    ```\n\n### Retrieve a Post [GET]\nReturns a specific Post.\n\n+ Response 200\n\n    [Post][]\n\n### Delete a Post [DELETE]\nDelete a Post. The current user must be the same user who created the Post. It\nreturns the deleted Post on success.\n\n+ Response 204\n\n## Posts Collection [\/stream\/0\/posts]\nA Collection of posts.\n\n+ Model (application\/json)\n\n    ```js\n    {\n        \"data\": [\n            {\n                \"id\": \"1\", \/\/ note this is a string\n                ...\n            },\n            {\n                \"id\": \"2\",\n                ...\n            },\n            {\n                \"id\": \"3\",\n                ...\n            },\n        ],\n        \"meta\": {\n            \"code\": 200,\n        }\n    }\n    ```\n\n### Create a Post [POST]\nCreate a new Post object. Mentions and hashtags will be parsed out of the post\ntext, as will bare URLs...\n\n+ Request\n\n    [Post][]\n\n+ Response 201\n\n    [Post][]\n\n### Retrieve all Posts [GET]\nRetrieves all posts.\n\n+ Response 200\n\n    [Posts Collection][]\n\n## Stars [\/stream\/0\/posts\/{post_id}\/star]\nA User\u2019s stars are visible to others, but they are not automatically added to\nyour followers\u2019 streams.\n\n+ Parameters\n    + post_id: `1` (string) - The id of the Post.\n\n### Star a Post [POST]\nSave a given Post to the current User\u2019s stars. This is just a \u201csave\u201d action,\nnot a sharing action.\n\n*Note: A repost cannot be starred. Please star the parent Post.*\n\n+ Response 200\n\n    [Post][]\n\n### Unstar a Post [DELETE]\nRemove a Star from a Post.\n\n+ Response 200\n\n    [Post][]","tags":"","url":"ld--apib.html"},{"title":"Writing Changelogs","text":"Use this format","tags":"","url":"ld--changelogs.html"},{"title":"Generating Cheatsheets","text":"Loft Docs makes it easy to generate cheatsheet partials based on a class's methods.  The partial will receive it's name from the group in the example code below.  Include the partial as you would any other dynamic partial.  The output might look something like this:\n\n\n\n\n  BrowserTestCase\n\n\n\n\n  assert ($fail_message = '')\n\n\n  assertElementExists ($css_selector, $failure_message = '')\n\n\n  assertElementNotExists ($css_selector, $failure_message = '')\n\n\n  assertElementNotVisible ($css_selector, $failure_message = '')\n\n\n  assertElementVisible ($css_selector, $failure_message = '')\n\n\n  el ($css_selector)\n\n\n  els ($css_selector)\n\n\n  generate ($method)\n\n\n  getDomElements (array $css_selectors)\n\n\n  getSession ()\n\n\n  getStored ($key, $default = NULL)\n\n\n  handleBaseUrl ()\n\n\n  loadPageByUrl ($url)\n\n\n  resolveUrl ($url, $remove_authentication_credentials = false)\n\n\n  store ($key, $value)\n\n\n\n\n\n\nHere's an example hook file that generated the above; be sure to register the hook in the config file.\n\n&lt;?php\n\n\/**\n * @file\n * An hook example of generating a PHP class method cheatsheet.\n *\n * Available variables:\n * - $compiler.\n *\/\n\nuse AKlump\\LoftLib\\Code\\Markdown;\n\n\/\/ Then you need to include an autoloader for the classes you want to scan.\nrequire_once $argv[1] . '\/..\/..\/vendor\/autoload.php';\n\n\/\/ Define the classes to read.\n$reader = new PhpClassMethodReader();\n\n\/\/ The goal is to create a cheatsheet of methods in \\AKlump\\DrupalTest\\BrowserTestCase.\n$reader-&gt;addClassToScan('\\AKlump\\DrupalTest\\BrowserTestCase', [\n\n  \/\/ But we want to exclude the method called 'getBrowser', so we use the\n  \/\/ second parameter which defines a filter.\n  PhpClassMethodReader::EXCLUDE,\n  ['\/^(getBrowser)$\/'],\n]);\n\n\/\/ Convert the scanned data into a markup table for each group, in this\n\/\/ example there is only one group, because we are using only one class.\nforeach ($reader-&gt;scan() as $group =&gt; $methods) {\n  $contents = '';\n  $methods = array_map(function ($method) use ($group) {\n    return [$group =&gt; '&lt;strong&gt;' . $method['name'] . '&lt;\/strong&gt; &lt;em&gt;(' . implode(', ', $method['params']) . ')&lt;\/em&gt;'];\n  }, $methods);\n  $contents .= Markdown::table($methods) . PHP_EOL;\n\n  \/\/ Save the snippet to be used by other pages.\n  $compiler-&gt;addInclude(\"_{$group}.md\", $contents);\n}","tags":"","url":"ld--cheatsheet.html"},{"title":"CLI Interface","text":"You can pass the following overrides to affect configuration\n\n--website=\/path\/to\/output\/dir\n\n\nPath to a config file, which also determines the source directory.\n\n--config=\/path\/to\/core-config.sh","tags":"","url":"ld--cli.html"},{"title":"Drupal Integration","text":"Compiling will output files compatible with the Advanced Help Module for Drupal.  By default these files will output to a folder named advanced_help, but with a little configuration the folder will output directory to the root of your module folder as help.\n\nThis will also output README.txt directly to your module's root directory, so long as you create \/source\/README.md and make the settings shown below.\n\nFollow these steps if you are using this for documenting a Drupal module:\n\n\nPlace this tool in the root of your module directory.  Add it to .gitignore so it doesn't get added to your module's repository.\nMake sure the folder help does not exist in your module's root; if it does it will be erased!\nMake sure README.txt does not exist in your module's root; if so it too will be erased during compiling.\nMake sure the following settings are present in core-config.sh; replace my_module with the name of the module; adjust the paths based on where your source files are in relation to your module's root.\n\ndrupal_module = 'my_module';\ndrupal_dir = '..\/help'\nREADME = '..\/..\/README.txt'\n\nMake sure to create \/source\/README.md; this compiles to README.txt.\nAs of version 0.7 the help.ini is automatic.  You may omit it, unless you want to specifically create it. You must also create the advanced help .ini file in source\/help.ini.  If you will be manually creating it read one... Please note that you should omit the module name!  Just name it help.ini.  See this file advanced_help\/help\/using-advanced-help.html inside the Advanced Help Module for more info.\n\n\nAfter you've written you markdown files, and compiled, you will see the help directory and the README.txt files in the root of your module.\n\nLinks\n\nDo not use &amp;topic:module\/topic&amp; as is suggested, rather follow the instructions above and the Advanced Help topic links will automatically be generated for you.\n\nImages\n\nDo not use the &amp;path&amp; convention when linking to images (as is recommended by the advanced help module), this convention will automatically be added for you during compiling.  Rather, do relative linking like this:\n\nCorrect:\n\n&lt;img src=\"images\/my_diagram.png\" \/&gt;\n\n\nIn-Correct:\n\n&lt;img src=\"&amp;path&amp;images\/my_diagram.png\" \/&gt;\n\n\n\n\nIf you are managing a project page at Drupal.org, you can try this strategy to keep your project page in sync with your README.txt file.\n\n.\n\u251c\u2500\u2500 README.twig.md\n\u251c\u2500\u2500 _overview.md\n\u2514\u2500\u2500 drupal_project_page.twig.md\n\n\n\nIn &#95;overview.md put the shared content; that which should appear on the project page and in the README file.\nUse an include {% include('_overview.md') %} in both files to pull in the shared info.\nMake sure html is not disabled in the configuration.\n\ndisabled = \"text mediawiki\"\n\nMake sure README is configured, as well.\n\nREADME = '..\/README.txt'\n\nCompile docs.\nCopy the contents of html\/drupal_project_page.html into the project page at drupal.org.","tags":"","url":"ld--drupal.html"},{"title":"Integration with GitHub","text":"GitHub allows for documentation loaded from docs in your repo root.  Here's a strategy for using loft_docs with a github repository.\n\n\n\n    .\n    \u251c\u2500\u2500 docs\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 how-to.html\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 index.html\n    \u2514\u2500\u2500 documentation\n        \u251c\u2500\u2500 core\n        \u251c\u2500\u2500 core-config.sh\n        \u2514\u2500\u2500 source\n            \u2514\u2500\u2500 how-to.md\n\n\n\nInstall Loft Docs in your repo in documentation\/core.\nSetup core-config.sh to compile website to docs.\n\nwebsite_dir = '..\/docs'\n\nEnsure that docs\/index.html is created on compile.\n\n\n\n\n\nLoad your repository page in the browser.\nClick the Settings link.\nScroll down to GitHub Pages.\nSet source to master branch \/docs folder and click Save.\nCopy the publish url, e.g. https:\/\/aklump.github.io\/visual_sitemap\/\nReturn to the repo page.\nClick the edit button.\nPaste the copied URL into Website and click Save.\nVisit the link and ensure the docs appear as expected.\nAdd something like the following to your README.md file, near the top.\n\n**Visit &lt;https:\/\/aklump.github.io\/visual_sitemap&gt; for full documentation.**","tags":"","url":"ld--github.html"},{"title":"Using iFrames","text":"iFrames\n\nOne of the cool features is that compiling will grab iframe source and render it directly into the html for offline viewing.  The way to do this is just to include an iframe tag in your source code like so:\n\n&lt;iframe src=\"http:\/\/www.my-site.com\/admin\/iframe\/content\" width=\"100%\" height=\"100%\"&gt;&lt;\/iframe&gt;\n\n\nThen during compiling, the iframe source will be grabbed and then inserted as an html snippet in the place of the iframe tag.\n\nBehind a Drupal Login\n\nIn some cases, your iframe content may be behind a Drupal login.  There is a contingency for this and it involves using the correct settings in core-config.sh.  You need to add or uncomment the following, replacing the credentials as appropriate.  That way the compiler will try to log in to your drupal site first before visiting the iframe source url.\n\ncredentials = \"http:\/\/user:pass@www.my-site.com\/user\/login\";","tags":"drupal iframe compile","url":"ld--iframes.html"},{"title":"Custom Theming the Website Version","text":"The files in \/core\/plugins\/twig\/tpl . control the output of the .html files found in the website folder public_html.  You should never modify these files, nor any files in core.  Instead to override the theming you should copy and modify that directory, e.g.\n\ncp -R core\/plugins\/twig\/tpl .\n\n\nFor CSS changes you should edit \/tpl\/style.css in the newly created \/tpl folder.  Or the SASS files as desired.","tags":"","url":"ld--theming.html"},{"title":"Tasklist (Todo Items)","text":"You must enable this feature for it to active as described below.\nOnce enabled, during compile a dynamic partial will be created of todo items called &#95;tasklist.md.  You may include it like other include files.\nAdd one or more todo items to your markdown source files using the Markdown Extra todo format as shown below. Read more.\nWhen items are aggregated, the filenames are prepended to the todo item.  The final list will be filtered for uniqueness, and duplicates removed.  If the same todo item appears more than once in a file, it will be reduced to a single item; but the same todo item can appear in more than one file, since the filename prepend creates uniqueness.\n\n\n\n\nThe following must appear in a source\/outline.merge.json to enable todo aggregation.\n\n{\n    \"settings\": {\n        \"tasklist\": {\n            \"aggregate\": true\n        }\n    }\n}\n\n\n\n\n# A Page With Tasks\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\n\n- [ ] a task list item\n- [ ] another task\n\nPraesent at vulputate tellus, vehicula dignissim elit.\n\n\n\n\nYou can do something like the following in a .twig.md file, and the aggregated tasklist will appear there.\n\n# Roadmap\n\nHere are the todo items left for this project.\n\n{% include('_tasklist.md') %}\n\n\n\n\nYou can control the order the tasks appear in the aggregated list by using the weight flag @w followed by an int or float number indicating the sort weight.  Lower numbers appear first.  The source file orders are not changed by the use of @w flag.\n\n- [ ] a task list item @w-10\n- [ ] a task list item @w10\n- [ ] a task list item @w10.1","tags":"","url":"ld--todos.html"},{"title":"Token Replacement","text":"@todo This needs to be rewritten due to the new linking feature.\n\n\n\n\nUsing frontmatter, you can define tokens in your markdown file that will be replaced during render.  See examples below.\n\n\n\nList your find\/replace tokens in frontmatter under the key tokens:\n\nHere is your markdown document:\n\n---\ntokens:\n    @modified: October 15, 2018\n    @s1: what-info-do-we-collect\n---\n# PRIVACY NOTICE\n\nLast Modified @modified\n\n* [What Information Do We Collect?](#@s1)\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.\n\n&lt;a name=\"ld--tokens.html\"&gt;&lt;\/a&gt;\n## WHAT INFORMATION DO WE COLLECT?\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.\n\nThis document was last updated on {{ modified }}.\n\n\n\n\nSee how you can use twig-style tokens by replacing the frontmatter tokens with twig.  Notice that the find keys do not include the {{ and }}, however in the body of the document they are present.\n\nHere is your markdown document:\n\n---\ntwig:\n    modified: October 15, 2018\n    l1: what-info-do-we-collect\n---\n# PRIVACY NOTICE\n\nLast Modified {{ modified }}\n\n* [What Information Do We Collect?](#{{ s1 }})\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.\n\n&lt;a name=\"{{ s1 }}\"&gt;&lt;\/a&gt;\n## WHAT INFORMATION DO WE COLLECT?\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.\n\nThis document was last updated on {{ modified }}.","tags":"","url":"ld--tokens.html"},{"title":"Using Variables","text":"To provide variables that are used in .twig.md files you can either provide global variables in source\/outline.merge.json as variables, or you can generate them in a pre hook.\n\n\n\n\nAdd something like the following to  source\/outline.merge.json:\n\n{\n    \"variables\": {\n        \"website_url\": \"https:\/\/www.my-website.com\",\n        \"author\": \"Aaron Klump\"\n    }\n}\n\n\n\n\n\nIn a PHP pre hook file do something like:\n\n$compiler-&gt;addVariables(['key' =&gt; 'value']);\n\n\n\n\n\nEnable Twig rendering on the page where you want to use the variables by adding the file suffix .twig.md.\nUse Twig replacement syntax, e.g. {{ author }}.","tags":"","url":"ld--variables.html"},{"title":"Compiling","text":"After a round of changes to the files found in \/source, you will need to export or compile your documentation.\n\n\n\nEach time you want to update your documentation files, after modifying files in source you need to execute compile from bash, make sure you are in the root directory of this package.\n\n.\/core\/compile\n\n\nYou may indicate an alternative config file by passing it as the first argument, e.g.\n\n.\/core\/compile \"\/Users\/aklump\/Code\/Projects\/InTheLoftStudios\/D8Shorts\/site\/dist\/documentation\/core-config.sh\"\n\n\n\n\nBy default folders in the source file are copied to the compiled output directories.  In some cases you will want greater control and\/or you will not want to mess up source with boilerplate folders.  For this reason there is a means to include files\/folders in the compiled output by creating a second directory, which is merged into to your final build.  Place your boilerplate content there.\n\nFor example to include a js directory in the website output you would create that folder as compile\/public_html\/js.\n\nsource\/\n    about.md\ncompile\/\n    public_html\/\n        js\/\n            app.js\n            extra.js\n\n\nIf you've reconfigured the folder name for the website directory, make sure to match the folder structure to the reconfigured name.\n\n\n\nYou may delete all compiled files using the clean command.\n\n.\/core\/clean\n\n\n\n\nTo watch your source directory for file changes and compile automatically as you work, you can use:\n\n.\/core\/watch","tags":"","url":"qs--compiling.html"},{"title":"Frontmatter and How to Use","text":"As of version 0.8 YAML frontmatter is supported in source files.  This is used to define items such as:\n\n\n\n\n  key\n  description\n\n\n\n\n  title\n  The title as it appears in the index\n\n\n  chapter\n  The id of the chapter; not the chapter title, mind you.\n\n\n  tags\n  Search tags, space separated\n\n\n  noindex\n  Set this to true to ignore or exclude a file from the index\n\n\n  search\n  Set this to \"noindex\" to prevent search indexing on this file\n\n\n  tokens\n  An array of find\/replace tokens that will processed before compile\n\n\n  twig\n  Like tokens except that the find is expecting twig-syntax {{ find }}.  Saves you from having to include the curly braces in your frontmatter\n\n\n\n\nRead more about frontmatter on the web.\n\nHere is an example:\n\n---\ntitle: The title of this page\nnoindex: true\n---\n\n\n\n\nYou may use an HTML comment syntax instead at the top of your markdown file, if preferred.  Inside the comment the format is still YAML.\n\n&lt;!--\ntitle: The title of this page\nnoindex: true\n--&gt;\n\n\n\n\nYou can also provide file metadata using outline.merge.json.  Do this when yaml is not appropriate and using JSON would be easier.  Here is an example:\n\n{\n    \"frontmatter\": {\n        \"demos--search-noindex2.html\": {\n            \"search\": \"noindex\"\n        }\n    }\n}\n\n\n\n\nFrontmatter is available when using the Twig extension .twig.md and preceding the keys with meta.  For example:\n\nIn source\/quote.twig.md...\n\n\n\n\n\n\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n\nAuthor, {{ meta.written|date(\"F j, Y\") }}\n```","tags":"","url":"qs--frontmatter.html"},{"title":"Pre\/Post hooks","text":"Create your hook file in hooks, which is a sibling directory to source.\nEnable the hook file in core.config.sh, e.g., pre_hooks = \"pre_compile.php\"\n\n\nYou may specify one or more PHP or shell scripts to be called both before and\/or after compiling using the pre_hooks and post_hooks config options.  The paths you present are relative to {root}\/hooks.  Compilation pauses until each script is finished.\n\npre_hooks = \"pre_compile.sh pre_compile.php\"\npost_hooks = \"post_compile.sh post_compile.php\"\n\n\n\n\nThe scripts will receive the following arguments:\n\n\n\n\n  php arg\n  bash arg\n  description\n\n\n\n\n  $argv[1]\n  $1\n  Path to the source\/ directory\n\n\n  $argv[2]\n  $2\n  Path to the core\/ directory\n\n\n  $argv[3]\n  $3\n  Path to the version file\n\n\n  $argv[4]\n  $4\n  Path to the parent directory of source, a.k.a the root directory\n\n\n  $argv[5]\n  $5\n  Path to the compiled website directory\n\n\n  $argv[6]\n  $6\n  Path to the compiled html directory\n\n\n  $argv[7]\n  $7\n  Path to the compiled text directory\n\n\n  $argv[8]\n  $8\n  Path to the compiled drupal directory\n\n\n  $argv[9]\n  $9\n  Path to write dynamic pages and includes before compile\n\n\n  $argv[10]\n  $10\n  Path to the outline JSON file\n\n\n\n\n\n\nPortions of your pages that need to be computed are generally going to be dynamic includes, which are included on your static pages named ending with .twig.md.\n\nPHP Hooks\n\nYou have access to an instance of $compiler, which has most methods you'd need.  Also any core classes are available and autoloaded so you simple need to declare them via use statements at the top of your hook file, e.g.,\n\n&lt;?php\n\nuse AKlump\\LoftDocs\\PhpClassMethodReader;\n...\n\n\nPHP hook files should only save content using a method on the $compiler instance.  To save an include file, use:\n\n$compiler-&gt;addInclude(...\n\n\nIf you want to generate an entire dynamic page, you should use:\n\n$compiler-&gt;addSourceFile(...\n\n\nBe sure to check out these classes for help with dynamic content:\n\n\n\\AKlump\\LoftLib\\Code\\Markdown\n\\AKlump\\LoftDocs\\PhpClassMethodReader\n\n\nBASH Hooks\n\nDynamice files should be written to the directory defined in $9\n\n\n\nYou may print or echo from your script and it will be echoed to the user.","tags":"extending pluggable","url":"qs--hooks.html"},{"title":"Introduction to Loft Docs","text":"Write your documentation in markdown.  Loft Docs will compile it for you in various formats.  Manage all your documentation needs using a single API.  Easily extended for advanced output scenarios.\n\nVisit https:\/\/aklump.github.io\/loft_docs for full documentation.\n\n\n\n\nSupport for Advanced Markdown.\nText search.\nGenerate complete web sites.\nGenerate Advanced Help for Drupal files.\nFully themable using Twig.\nHook into compilation to provide dynamic content such as class method cheatsheets.\nTasklist aggregation.\n\n\n\n\n\n\n\nIn order to use the text format you must have Lynx installed.\n\n\n\n\nIf you find this project useful... please consider making a donation.\n\n\n\n\nlorem\nipsum\n\n\n\n\n\nCreate pages in source\/ as markdown files.\nAdd images to source\/images\/.\nCompile your documention.\nRead your documentation at docs\/index.html.\n\n\n\n\nLoft Docs provides a core update feature as seen below.  From the root directory type:\n\n.\/core\/update","tags":"","url":"qs--intro.html"},{"title":"Linking to Other Pages","text":"Because filenames may change, as you move files around to different chapters, or simply re-organize, you do not want to write your internal links to other pages based on filename.  Instead you will use the convention descriped here to link from page A to page B, or to a subsection of page B.\n\n\n\nStudy these page snippets below to see how cross-page linking is accomplished.  Notice the following points:\n\n\nThe id of the page is declared in it's frontmatter, this is the constant that will be used in your links.  This should never change once established.  This is what allows the filenames to be fluid and not break your internal linking.\nIn the link path you will reference your target by it's id, e.g. @link_from_demo, @link_to_demo, etc.  Notice the @ symbol as id prefix.\n\n\npage one: ex--alpha.md\n\n---\nid: link_from_demo\n---\n# The First Page\n\nDo you want to [view the next page](@link_to_demo)\n\n\npage two: ex--branvo.md\n\n---\nid: link_to_demo\n---\n# The Second Page\n\nGo back to [the first page](@link_from_demo)    \n\n\n\n\nThis is how you link to a section header on another page.\n\n\nThe header id must not contain whitespace, e.g., extra\n\n\npage one: ex--alpha.md\n\n---\nid: link_from_demo\n---\n# The First Page\n\nDo you want to [read some extra info?](@link_to_demo:extra)\n\n\npage two: ex--bravo.md\n\n---\nid: link_to_demo\n---\n# The Second Page\n\nGo back to [the first page](@link_from_demo)\n\n##:extra Some Extra Information\n\n\nUsing RAW Html\n\nIf you are going to write plain HTML, you write your headers using an id attribute like vanilla HTML, but your link tag href must use the same format as per Markdown.\n\npage one: ex--alpha.md\n\n---\nid: link_from_demo\n---\n# The First Page\n\nDo you want to  &lt;a href=\"demos--linkto.html#extra\"&gt;read some extra info?&lt;\/a&gt;\n\n\npage two: ex--branvo.md\n\n---\nid: link_to_demo\n---\n# The Second Page\n\nGo back to &lt;a href=\"demos--linkfrom.html\"&gt;the first page&lt;\/a&gt;\n\n&lt;h2 id=\"extra\"&gt;Some Extra Information","tags":"","url":"qs--linking.html"},{"title":"Partials (Include Files)","text":"Files in source, which begin with an underscore are considered partials and will be ignored during render, e.g., &#95;table.md\nInclude such files using the twig syntax, {% include('_table.md') %}\nName these parent files ending with .twig.md so the Twig processor runs on them.\n\n\n\n\n\n  Goal: To create a file that defines a table and include that table in two different pages.\n\n\nYour source directory will resemble the following:\n\n.\n\u251c\u2500\u2500 _table.md\n\u251c\u2500\u2500 page.twig.md\n\u2514\u2500\u2500 page2.twig.md\n\n\nThe contents of &#95;table.md:\n\n| Key | Value |\n|----------|----------|\n| Size | large  |\n| Shape | square |\n\n\nThe contents of page.twig.md:\n\n# Page One\n\nHere is the table:\n\n{% include('_table.md') %}\n\n\nThe contents of page2.twig.md:\n\n# Page Two\n\nAnd again a reference to the table:\n\n{% include('_table.md') %}    \n\n\n\n\nUsing a PHP hook file, you can generate dynamic partials during compile.  These can be referenced in your static source files just like other partials.  Here's an example of code for a hook file that generates a dynamic partial called &#95;headline.md.  Dynamic files are automatically cleaned up by the compiler.\n\n&lt;?php\n$contents = \"## Today is: \" . date('r');\necho $compiler-&gt;addInclude('_headline.md', $contents)\n    -&gt;getBasename() . ' has been created.' &amp;&amp; exit(0);\nexit(1);","tags":"","url":"qs--partials.html"},{"title":"Search","text":"To enable search you need to create a file in the source directory called search--results.md.  This file will be used as the stub for the search results page and can either be empty or you can add content to it.\n\n\n\nIf you need to add search tags to pages , use the frontmatter with the key: tags.  Follow these guidlines:\n\n\nTags MUST NOT contain a space.\n\n---\n---\n\n\n\n\n\nThere are two ways.  For markdown source files, frontmatter is preferred.\n\n\nUse the frontmatter like this:\n\n---\nsearch: noindex\n---\n\n\n\nWhen that can't be used, say for an .html file, you can use the outline.merge.json file with the\n\n{\n    \"frontmatter\": [\n        {\n            \"master.apib.html\": {\n                \"search\": \"noindex\"\n            }\n        }\n    ]\n}","tags":"","url":"qs--search.html"},{"title":"Terms Used","text":"Term\n  Definition\n\n\n\n\n  Include\n  A snippet that is injected into another page.\n\n\n  Partial\n  See Include\n\n\n  Dynamic Include\n  An include file that is generated at compile time.  Often by hooks, or internally by the compiler.\n\n\n  Compile settings\n  Metadata added to a file in your source directory called outline.merge.json, which controls the compile process.","tags":"","url":"qs--terms.html"},{"title":"Table of Contents","text":"The table of contents is generated automatically based on the filenames of your markdown files.  The pages are listed alphabetically based on the page titles.  To overide this automation you will use a file called outline.merge.json which is also placed in the source directory; please refer to examples\/outline.json for the complete file schema.\n\n\n\nYou can control the order of pages listed in the TOC by adding to outline.merge.json.  The order of items added to the sections key takes precedence.  All that is needed to affect order is the id.  In the following code snippet you see that installation will appear first in the index, followed by changelog.  The remaining files will appear in the default title ascending order.  Notice that in the second element the title key is also used in outline.merge.json.  This allows you to control the index title for a page, independant of the how the title is displayed when the page is viewed.\n\n{\n    \"sections\": [\n        {\n            \"id\": \"installation\"\n        },\n        {\n            \"id\": \"changelog\",\n            \"title\": \"CHANGELOG\"\n        }\n    ],\n    ...\n\n\n\n\nIt's often nice to subdivide your documentation into chapters and this is very easy to do.  It requires two additional steps:\n\n\nPrepend files with a chapter &lt;chapter_id&gt;--, e.g. qs--installation.md and adv--files.md.\nDefine the chapters in outline.merge.json.\n\n{\n    \"chapters\": [\n        {\n            \"id\": \"qs\",\n            \"title\": \"Quick Start\"\n        },\n        {\n            \"id\": \"adv\",\n            \"title\": \"Advanced Usage\"\n        }\n    ],\n....            \n\n\n\n\n\nTo cause the automated indexing to skip over a page, either make that page a partial, e.g. &#95;fragment.md, or set the noindex frontmatter on the file.  See the frontmatter section for more info.\n\n\n\nThis is the method that stems from the Drupal advanced help module and looks something like the following.  Using outline.merge.json is probably the better approach, and this will most likely be deprecated in future versions.\n\n[_tasklist]\ntitle = \"My Tasklist\"","tags":"needs_work","url":"qs--toc.html"},{"title":"Documentation Version","text":"If you are documenting software, you are most likely going to want your documentation to follow the same version as the software.  The default theme writes the version in the footer.  This page tells you how to indicate the version to the compiler.\n\nIf you do nothing the default version is always 1.0.\n\n\n\nIn core-config.sh you can point to a static file containing a version string.  Several file are understood including:\n\n\ncomposer.json\npackage.json\n&#42;.info\n\n\nAdd the following to core-config.sh:\n\nversion_file = \"\/some\/absolute\/path\/version.info\"\n\n\nor a relative file (relative to the directory containing core-config.sh)\n\nversion_file = \"..\/composer.json\"\n\n\n\n\nIn the event version_file is not sufficient you can point to a script that echos the version string of your documentation_.  These version hook script (PHP or BASH) receives the same arguments as the pre\/post hooks.  You define your version hook in config.  See version_hook.php as an implementation example.  Only one file is allowed in the declaration; either php or shell.\n\nversion_hook = \"version_hook.php\"","tags":"","url":"qs--version.html"},{"title":"Search Results","text":"","tags":"","url":"search--results.html"}]};
