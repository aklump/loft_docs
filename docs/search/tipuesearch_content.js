var tipuesearch = {"pages":[{"title":"Changelog","text":"  0.10   Reduced default polling for watch.php from 20 to 2. Removed the sort key from the json outlines. Added support for includes for files ending in .twig.md. Todos are only compiled if you enable them in outline.merge.json. Todos are now present as an include file, not as a page.  Therefore you must both enable aggregation and use an include expression in a file.  See documentation for more info.   0.9.10   POSSIBLE BREAKING CHANGE: Added Deny from All to the .htaccess for public_html pattern.  If this breaks your compile, use a post compile hook to overwrite the default .htaccess file; see hooks\/htaccess.sh for an example of how to do this.  Be sure to register the hook file in core-config.sh in the post_hooks section, or it won't be called.   0.9   Removed support for kit templates. Now using Twig templates. Lost iframe support; plans to bring it back in future.   0.8.18   Removed all traces of doxygene due to no plans for implementation.   0.8.10   API CHANGE: auto-generated.outline.json is now called outline.auto.json   0.8   BREAKING CHANGE: The paths in the config var README are now relative to the directory that contains core-config.sh, not the source folder.  ","tags":"","url":"CHANGELOG.html"},{"title":"What Is Loft Docs?","text":"  Loft Docs is the last project documentation tool you'll ever need.  Loft Docs provides one central place to manage your documentation allowing you to compose in Markdown and have the benefits of simultaneous output to the following formats:   An indexed, multi-page, stand-alone, searchable (via js) website HTML Plaintext MediaWiki Advanced Help for Drupal   Gone are the days of having to update all your different documentation locations!  For installation instructions scroll down.  Features   Tasklist todo item aggregation and sorting. Output to many popular formats. Compilation hooks for before and after. Custom website theming. Searchable pages (in the website output)   Contributing  If you find this project useful... please consider making a donation.  As a Reader   To read documentation you probably just want to load public_html\/index.html in a browser and proceed from there. Plaintext documentation may also be available in text\/. MediaWiki documentation if supported will be found in mediawiki\/.   As an Author   You will concern yourself with the \/source directory, creating your source markdown files here.  This is the source of all documentation. Only files in the source directory should  be edited.  All other files get created during compiling. Images can be added to source\/images. Use relative links when linking to other pages inside source. Use absolute links when linking to anything outside of source.   As an Admin\/Content Manager   You will need to read about compiling below; this is the step needed to generate derivative documentation from \/source.   Linking to Other Help Pages  You should do the following to link internally to source\/page2.html  &lt;a href=\"page2.html\"&gt;Link to Next Page&lt;\/a&gt;   As a Developer  If you are implementing any hooks and you need component or include files, which compile to markdown files in \/source:   Put these component files in \/parts not in \/source. Make sure the generated files begin with the underscore, e.g., _my_compiled_file.md.  That will indicate these files are compiled and can be deleted using core\/clean.   Core update  Loft Docs provides a core update feature as seen below.  From the root directory type:  .\/core\/update   Rationale  The rationalle behind this project is that it is easy to write markdown files, and it is easy to share a static html based documentation file, and it is easy to use Drupal Advanced Help module, and it is easy to version your documentation in git; but to do all this together at once\u2026 was NOT EASY.  But now with Loft Docs... it's easy.  Contact   In the Loft Studios Aaron Klump - Developer PO Box 29294 Bellingham, WA 98228-1294 aim: theloft101 skype: intheloftstudios d.o: aklump http:\/\/www.InTheLoftStudios.com  ","tags":"","url":"README.html"},{"title":"","text":" ","tags":"","url":"demos--empty-file.html"},{"title":"Demo: An Example Page &amp; Image","text":"  Section Title  What do you think of my new island?   ","tags":"","url":"demos--example.html"},{"title":"Demo: Include Files","text":"  The following headline is created during compile by hooks\/pre_compile.php, which generates a dynamic include file core\/cache\/source\/_headline.md that is inserted here:  Today is: Thu, 21 Feb 2019 21:45:07 +0100  And the following table is defined in a partial in source\/_table.md.       Key   Value       Size   large     Shape   square    ","tags":"","url":"demos--includes.html"},{"title":"Markdown Extra Demonstration Page","text":"  This page has markdown extra stuff...  A Table       do   re       C   D     Todo Item   [ ] This task (which uses Markdown Extra todo syntax) will get aggregated automatically @w10  ","tags":"","url":"demos--md_extra.html"},{"title":"Level One","text":"  Italic text  Bold text  Bold and Italic text  Level Two   do re mi fa   Level Three   uno dos tres quatro   Level Four  What does it do with &lt;?php echo 'this text';?&gt;?  10 print 'hello' 20 goto 10   Level Five  google  Level Six  Freeing Up Harddrive Space  Sites Folder   Use WhatSize appt o locate larger ~Sites\/* Go through and replace older .screenflow movies with their derivative .mov files Delete the contents of the files folders on old sites that are no longer active Go through and zip legacy folders Remove older database snapshots  ","tags":"","url":"demos--mediawiki.html"},{"title":"","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla at massa sed nulla consectetur malesuada. Aliquam a sapien non sem rhoncus bibendum quis eu tellus. Nunc luctus fermentum volutpat. Praesent tortor diam, sodales ornare facilisis sit amet, consequat nec elit. Aenean at porttitor purus. Phasellus tempus congue suscipit. Vivamus in magna ante, ut cursus mi. Quisque vel ante in massa pretium condimentum non id risus. Vivamus at felis eu enim egestas feugiat ut sit amet arcu. Nunc eu malesuada nunc. Nam felis lectus, convallis eu commodo eget, vehicula quis sem. Nulla egestas bibendum consequat. Pellentesque tristique lacus at leo dapibus pulvinar. ","tags":"","url":"demos--no-index.html"},{"title":"Subtitle","text":"  This page should not have a title derived from the markdown. ","tags":"","url":"demos--no-title.html"},{"title":"Demo: Todo List","text":"  Here are the todo items for this project.  You should see at least 12 todo items.  Tasklist  - [ ] demos--todos-b: Echo - [ ] demos--todos-b: Foxtrot - [ ] demos--todos-a: Charlie - [ ] demos--todos-a: Bravo - [ ] demos--todos-a: Alpha - [ ] ld--todos: a task list item @w-10 - [ ] ld--todos: another task - [ ] ld--todos: a task list item - [ ] ld--roadmap: Fix the delay caused by deleting files at beginning of compile. - [ ] demos--todos-c: Lima - [ ] demos--todos-c: Kilo - [ ] demos--todos-c: Juliette - [ ] demos--todos-c: India - [ ] demos--todos-b: Hotel - [ ] demos--todos-b: Golf - [ ] demos--todos-a: Delta - [ ] demos--md_extra: This task (which uses Markdown Extra todo syntax) will get aggregated automatically @w10 - [ ] ld--todos: a task list item @w10 - [ ] ld--todos: a task list item @w10.1  ","tags":"","url":"demos--tasklist.html"},{"title":"Demo: The Sniffed Title","text":"  This page should not have a title derived from the markdown. ","tags":"","url":"demos--title.html"},{"title":"Demo: Todo List Aggregation 1 of 3","text":"   [ ] Alpha [ ] Bravo   Some Header   [ ] Charlie [ ] Delta  ","tags":"","url":"demos--todos-a.html"},{"title":"Demo: Todo List Aggregation 2 of 3","text":"   [ ] Echo [ ] Foxtrot   Some Header   [ ] Golf [ ] Hotel  ","tags":"","url":"demos--todos-b.html"},{"title":"Demo: Todo List Aggregation 3 of 3","text":"   [ ] India [ ] Juliette   Some Header   [ ] Kilo [ ] Lima  ","tags":"","url":"demos--todos-c.html"},{"title":"Auto-compiling","text":"  To watch your source directory for file changes and compile automatically as you work, you can use:  .\/core\/watch  ","tags":"","url":"ld--autocompile.html"},{"title":"Generating Cheatsheets","text":"  Loft Docs makes it easy to generate cheatsheet partials based on a class's methods.  The partial will receive it's name from the group in the example code below.  Include the partial as you would any other dynamic partial.  The output might look something like this:       BrowserTestCase       assert ($fail_message = '')     assertElementExists ($css_selector, $failure_message = '')     assertElementNotExists ($css_selector, $failure_message = '')     assertElementNotVisible ($css_selector, $failure_message = '')     assertElementVisible ($css_selector, $failure_message = '')     el ($css_selector)     els ($css_selector)     generate ($method)     getDomElements (array $css_selectors)     getSession ()     getStored ($key, $default = NULL)     handleBaseUrl ()     loadPageByUrl ($url)     resolveUrl ($url, $remove_authentication_credentials = false)     store ($key, $value)     The Hook File Example Code  Here's an example hook file that generated the above; be sure to register the hook in the config file.  &lt;?php  \/**  * @file  * An hook example of generating a PHP class method cheatsheet.  *  * Available variables:  * - $compiler.  *\/  use AKlump\\LoftLib\\Code\\Markdown;  \/\/ Then you need to include an autoloader for the classes you want to scan. require_once $argv[1] . '\/..\/..\/vendor\/autoload.php';  \/\/ Define the classes to read. $reader = new PhpClassMethodReader();  \/\/ The goal is to create a cheatsheet of methods in \\AKlump\\DrupalTest\\BrowserTestCase. $reader-&gt;addClassToScan('\\AKlump\\DrupalTest\\BrowserTestCase', [    \/\/ But we want to exclude the method called 'getBrowser', so we use the   \/\/ second parameter which defines a filter.   PhpClassMethodReader::EXCLUDE,   ['\/^(getBrowser)$\/'], ]);  \/\/ Convert the scanned data into a markup table for each group, in this \/\/ example there is only one group, because we are using only one class. foreach ($reader-&gt;scan() as $group =&gt; $methods) {   $contents = '';   $methods = array_map(function ($method) use ($group) {     return [$group =&gt; '&lt;strong&gt;' . $method['name'] . '&lt;\/strong&gt; &lt;em&gt;(' . implode(', ', $method['params']) . ')&lt;\/em&gt;'];   }, $methods);   $contents .= Markdown::table($methods) . PHP_EOL;    \/\/ Save the snippet to be used by other pages.   $compiler-&gt;addInclude(\"_{$group}.md\", $contents); }  ","tags":"","url":"ld--cheatsheet.html"},{"title":"Compiling","text":"  After a round of changes to the files found in \/source, you will need to export or compile your documentation.  Requirements   In order to use the text format you must have Lynx installed.   How to compile  Each time you want to update your documentation files, after modifying files in source you need to execute compile from bash, make sure you are in the root directory of this package.  .\/core\/compile   Folders and Other Includes  By default folders in the source file are copied to the compiled output directories.  In some cases you will want greater control and\/or you will not want to mess up source with boilerplate folders.  For this reason there is a means to include files\/folders in the compiled output by creating a second directory, which is merged into to your final build.  Place your boilerplate content there.  For example to include a js directory in the website output you would create that folder as compile\/public_html\/js.  source\/     about.md compile\/     public_html\/         js\/             app.js             extra.js   If you've reconfigured the folder name for the website directory, make sure to match the folder structure to the reconfigured name.  Defining the documentation version  Some of the templates utilize a version string.  How this is provided is the the next topic covered.  If no version can be found the string will always be 1.0  By default, Loft Docs will look for *.info, in the directory above core\/.  If this is not working or desired then you can specify a path in core-config.sh as such:  version_file = \"\/some\/absolute\/path\/version.info\"   There is a built in a version hook that can sniff a version from .info and .json files and that may suffice.  If not read on about a custom version hook...  A version hook is a php or shell script that echos the version string of your documentation.  These version hook script receives the same arguments as the pre\/post hooks.  You define your version hook in config.  See version_hook.php as an implementation example.  Only one file is allowed in the declaration; either php or shell.  version_hook = \"version_hook.php\"   Removing Compiled Files  You may delete all compiled files using the clean command.  .\/core\/clean  ","tags":"","url":"ld--compiling.html"},{"title":"Drupal Integration","text":"  Compiling will output files compatible with the Advanced Help Module for Drupal.  By default these files will output to a folder named advanced_help, but with a little configuration the folder will output directory to the root of your module folder as help.  This will also output README.txt directly to your module's root directory, so long as you create \/source\/README.md and make the settings shown below.  Follow these steps if you are using this for documenting a Drupal module:   Place this tool in the root of your module directory.  Add it to .gitignore so it doesn't get added to your module's repository. Make sure the folder help does not exist in your module's root; if it does it will be erased! Make sure README.txt does not exist in your module's root; if so it too will be erased during compiling. Make sure the following settings are present in core-config.sh; replace my_module with the name of the module; adjust the paths based on where your source files are in relation to your module's root.  drupal_module = 'my_module'; drupal_dir = '..\/help' README = '..\/..\/README.txt'  Make sure to create \/source\/README.md; this compiles to README.txt. As of version 0.7 the help.ini is automatic.  You may omit it, unless you want to specifically create it. You must also create the advanced help .ini file in source\/help.ini.  If you will be manually creating it read one... Please note that you should omit the module name!  Just name it help.ini.  See this file advanced_help\/help\/using-advanced-help.html inside the Advanced Help Module for more info.   After you've written you markdown files, and compiled, you will see the help directory and the README.txt files in the root of your module.  Links  Do not use &amp;topic:module\/topic&amp; as is suggested, rather follow the instructions above and the Advanced Help topic links will automatically be generated for you.  Images  Do not use the &amp;path&amp; convention when linking to images (as is recommended by the advanced help module), this convention will automatically be added for you during compiling.  Rather, do relative linking like this:  Correct:  &lt;img src=\"images\/my_diagram.png\" \/&gt;   In-Correct:  &lt;img src=\"&amp;path&amp;images\/my_diagram.png\" \/&gt;  ","tags":"","url":"ld--drupal.html"},{"title":"FrontMatter in json","text":"  You can also provide frontmatter to files using outline.merge.json.  Do this when yaml is not appropriate and using json would be easier.  Here is an example:  {     \"frontmatter\": {         \"demos--search-noindex2.html\": {             \"search\": \"noindex\"         }     } }  ","tags":"code php how-to\nnoindex: true\n---","url":"ld--frontmatter.html"},{"title":"Integration with GitHub","text":"  GitHub allows for documentation loaded from docs in your repo root.  Here's a strategy for using loft_docs with a github repository.  File Structure      .     \u251c\u2500\u2500 docs     \u2502\u00a0\u00a0 \u251c\u2500\u2500 how-to.html     \u2502\u00a0\u00a0 \u2514\u2500\u2500 index.html     \u2514\u2500\u2500 documentation         \u251c\u2500\u2500 core         \u251c\u2500\u2500 core-config.sh         \u2514\u2500\u2500 source             \u2514\u2500\u2500 how-to.md    Install Loft Docs in your repo in documentation\/core. Setup core-config.sh to compile website to docs.  website_dir = '..\/docs'  Ensure that docs\/index.html is created on compile.   Setup on github.com   Load your repository page in the browser. Click the Settings link. Scroll down to GitHub Pages. Set source to master branch \/docs folder and click Save. Copy the publish url, e.g. https:\/\/aklump.github.io\/visual_sitemap\/ Return to the repo page. Click the edit button. Paste the copied URL into Website and click Save. Visit the link and ensure the docs appear as expected. Add something like the following to your README.md file, near the top.  **Visit &lt;https:\/\/aklump.github.io\/visual_sitemap&gt; for full documentation.**   ","tags":"","url":"ld--github.html"},{"title":"Pre\/Post hooks","text":"   Create your hook file in hooks, which is a sibling directory to source. Enable the hook file in core.config.sh, e.g., pre_hooks = \"pre_compile.php\"   You may specify one or more PHP or shell scripts to be called both before and\/or after compiling using the pre_hooks and post_hooks config options.  The paths you present are relative to {root}\/hooks.  Compilation pauses until each script is finished.  pre_hooks = \"pre_compile.sh pre_compile.php\" post_hooks = \"post_compile.sh post_compile.php\"   Arguments Sent to Scripts  The scripts will receive the following arguments:       php arg   bash arg   description       $argv[1]   $1   Path to the source\/ directory     $argv[2]   $2   Path to the core\/ directory     $argv[3]   $3   Path to the version file     $argv[4]   $4   Path to the parent directory of source, a.k.a the root directory     $argv[5]   $5   Path to the compiled website directory     $argv[6]   $6   Path to the compiled html directory     $argv[7]   $7   Path to the compiled text directory     $argv[8]   $8   Path to the compiled drupal directory     $argv[9]   $9   Path to write dynamic pages before compile     $argv[10]   $10   Path to write dynamic twig includes to.  A file you create here is available using {% include('my_dynamic_file.md') %}     $argv[11]   $11   Path to the outline JSON file     Generating Dynamic Content  Portions of your pages that need to be computed are generally going to be dynamic includes, which are included on your static pages named ending with .twig.md.  PHP Hooks  You have access to an instance of $compiler, which has most methods you'd need.  Also any core classes are available and autoloaded so you simple need to declare them via use statements at the top of your hook file, e.g.,  &lt;?php  use AKlump\\LoftDocs\\PhpClassMethodReader; ...   PHP hook files should only save content using a method on the $compiler instance.  To save an include file, use:  $compiler-&gt;addInclude(...   If you want to generate an entire dynamic page, you should use:  $compiler-&gt;addSourceFile(...   Be sure to check out these classes for help with dynamic content:   \\AKlump\\LoftLib\\Code\\Markdown \\AKlump\\LoftDocs\\PhpClassMethodReader   BASH Hooks  Dynamice files should be written to the directory defined in $9  Screen Output  You may print or echo from your script and it will be echoed to the user. ","tags":"extending pluggable","url":"ld--hooks.html"},{"title":"iFrames","text":"  One of the cool features is that compiling will grab iframe source and render it directly into the html for offline viewing.  The way to do this is just to include an iframe tag in your source code like so:  &lt;iframe src=\"http:\/\/www.my-site.com\/admin\/iframe\/content\" width=\"100%\" height=\"100%\"&gt;&lt;\/iframe&gt;   Then during compiling, the iframe source will be grabbed and then inserted as an html snippet in the place of the iframe tag.  Behind a Drupal Login  In some cases, your iframe content may be behind a Drupal login.  There is a contingency for this and it involves using the correct settings in core-config.sh.  You need to add or uncomment the following, replacing the credentials as appropriate.  That way the compiler will try to log in to your drupal site first before visiting the iframe source url.  credentials = \"http:\/\/user:pass@www.my-site.com\/user\/login\";  ","tags":"drupal iframe compile","url":"ld--iframes.html"},{"title":"Table of Contents\/Indexing","text":"  The index of your documentation may be provided in three ways: two are explicit and one is automatic.  Automatic: Scanning of the source directory.   Markdown files in sources will be scanned and automatically indexed, unless marked with the noindex frontmatter. This is the fastest method but does not provide as much control. While initially writing your documentation this method is suggested; you can finalize your documentation based on the automatic json file that is produced by this method. The name of the file is important as it contains a pattern to distinguish the chapter\/section.  Chapters are not required if all sections are to fit in one chapter.  {chapter}--{section}.md    help.ini  This is the method that stems from the Drupal advanced help module and looks something like this.  It is explicit, yet gives the lesser control as the input keys are limited.  [_tasklist] title = \"My Tasklist\"   outline.json  It relies on a json file to provide the outline for your book.  Please refer to examples\/outline.json for the file schema.  This is the best method for providing exact control as it's completely explicit.  That said, it's tedius to maintain and so the other files below should be understood before you commit to using outline.json.  outline.auto.json  This file is generated during compile IF outline.json is not found in the source directory.  It is based on the file structure of source plus other meta data (frontmatter, markdown header detection, etc.) as able to be determined during compile.  You will find the file at core\/cache\/outline.auto.json.  outline.merge.json  This file will be used during compile to override any values normally visible in outline.auto.json.  Use this to override or add to what normally shows up in outline.auto.json.  It will have no effect if outline.json is present in the source directory. ","tags":"","url":"ld--index.html"},{"title":"Installation","text":"  How you incorporate Loft Docs is up to you, but there are two scenarios which will be described here, with suggested installation instructions.  Quick Start   Copy the contents of \/dist into your project. From within dist, in the shell, run .\/core\/compile. Open dist\/public_html\/welcome.html and follow instructions.   Stand-alone implementation  If your goal is simply to document something, and these files will not integrate into another larger project (think git repo), then this is a stand-alone installation.  This would also be the case where you're using Loft Docs to build a website.  Loft Docs' root is the root of your project.  Here's the minimum file structure of a stand-alone implementation:  \/.gitignore \/core \/core-config.sh \/core-version.info \/public_html \/source \/stand_alone.info   In this scenario the version string of your project is contained in \/stand_alone.info which is one level above Loft Docs' core, and so your config file would contain this line:  version_file = \"..\/web_package.info\"   Or, for greater flexibility (so long as you've only one .info file), it could be:  version_file = \"..\/*.info\"   If you were to host this as a website, public_html is your web root.  Integrated implementation  If you are installing Loft Docs inside the existing code of a larger project, then this constitutes an integrated installation.  Loft Docs is not the root of the larger project, but a sub-folder, maybe you call it docs and store it in the root of the other project.  \/docs\/core \/other_project_file1 \/other_project_file2 \/other_project_file3 \/web_package.info   In this scenario the version string of your project is contained in \/web_package.info which is one levels above Loft Docs, and so your config file would contain this line:  version_file = \"..\/web_package.info\"   Or, for greater flexibility (so long as you've only one .info file), it could be:  version_file = \"..\/*.info\"  ","tags":"","url":"ld--install.html"},{"title":"How to install","text":"   Run the compile command, the first time it is runned, installation takes place.  .\/core\/compile  The necessary dirs will be created including these configuration file(s):  core-config.sh  Open and edit core-config.sh. You should not delete this file once it's been created, as it is the flag that installation has taken place! Compiling without this file may lead to some\/all of your files being deleted. Enter the name of the drupal module this will be used for, if applicable. Enter the credentials for the drupal site if using iframes. Override the php path if needed; php must have the curl library installed. Run .\/core\/compile once more to update the configuration. Test the installation by visiting public_html\/index.html in a browser, this is the webpage output and should show you a few example pages. Installation is complete; you may now begin documenting in source. You most likely should first delete the example files in source.   How to install Lynx on Mac  Here's a quick way to get Lynx on a mac...   Download this application http:\/\/habilis.net\/lynxlet\/ In shell type cd \/usr\/bin Followed by sudo ln -s \/Applications\/Lynxlet.app\/Contents\/Resources\/lynx\/bin\/lynx Test your installation with this command lynx; you should see the lynx browser show up.   or with homebrew   brew install lynx  ","tags":"","url":"ld--installation.html"},{"title":"Partials (Include Files)","text":"   Files in source, which begin with an underscore are considered partials and will be ignored during render, e.g., &#95;table.md Include such files using the twig syntax, {% include('_table.md') %} Name these parent files ending with .twig.md so the Twig processor runs on them.   An Example     Goal: To create a file that defines a table and include that table in two different pages.   Your source directory will resemble the following:  . \u251c\u2500\u2500 _table.md \u251c\u2500\u2500 page.twig.md \u2514\u2500\u2500 page2.twig.md   The contents of &#95;table.md:  | Key | Value | |----------|----------| | Size | large  | | Shape | square |   The contents of page.twig.md:  # Page One  Here is the table:  {% include('_table.md') %}   The contents of page2.twig.md:  # Page Two  And again a reference to the table:  {% include('_table.md') %}       Creating Partials During Compile  Using a PHP hook file, you can generate dynamic partials during compile.  These can be referenced in your static source files just like other partials.  Here's an example of code for a hook file that generates a dynamic partial called &#95;headline.md.  Dynamic files are automatically cleaned up by the compiler.  &lt;?php $contents = \"## Today is: \" . date('r'); echo $compiler-&gt;addInclude('_headline.md', $contents)     -&gt;getBasename() . ' has been created.' &amp;&amp; exit(0); exit(1);  ","tags":"","url":"ld--partials.html"},{"title":"Roadmap","text":"  Compile time takes too long for videos  When compiling the output directories are deleted.  This needs to change so that if videos are in a directory we don't have to waste time duplicating large files.   [ ] Fix the delay caused by deleting files at beginning of compile.  ","tags":"","url":"ld--roadmap.html"},{"title":"Search","text":"  To enable search you need to create a file in the source directory called:      search--results.md   The file will be used as the stub for the search results page and can either be empty or you can add content to it.  How to explicitly tag content  If you need to add search tags to pages , use the front matter with the key: tags.  Follow these guidlines:   Tags MUST NOT contain a space.  --- tags: code php how-to ---    How to exclude a page from the search index  There are two ways.  For markdown source files, front matter is preferred.   Use the frontmatter like this:  --- search: noindex ---    When that can't be used, say for an .html file, you can use the outline.merge.json file with the  {     \"frontmatter\": [         {             \"master.apib.html\": {                 \"search\": \"noindex\"             }         }     ] }  ","tags":"","url":"ld--search.html"},{"title":"Terms Used","text":"       Term   Definition       Include   A snippet that is injected into another page     Partial   See Include     Dynamic Include   An include file that is generated at compile time.  Often by hooks, or internally by the compiler.     Compile settings   metadata added to a file in your source directory called outline.merge.json, which controls the compile process    ","tags":"","url":"ld--terms.html"},{"title":"Custom Theming the Website Version","text":"  The files in \/core\/plugins\/twig\/tpl . control the output of the .html files found in the website folder public_html.  You should never modify these files, nor any files in core.  Instead to override the theming you should copy and modify that directory, e.g.  cp -R core\/plugins\/twig\/tpl .   For css changes you should edit \/tpl\/style.css in the newly created \/tpl folder.  Or the SASS files as desired. ","tags":"","url":"ld--theming.html"},{"title":"Tasklist (Todo Items)","text":"   You must enable this feature for it to active as described below. Once enabled, during compile a dynamic partial will be created of todo items called &#95;tasklist.md.  You may include it like other include files. Add one or more todo items to your markdown source files using the Markdown Extra todo format as shown below. Read more. When items are aggregated, the filenames are prepended to the todo item.  The final list will be filtered for uniqueness, and duplicates removed.  If the same todo item appears more than once in a file, it will be reduced to a single item; but the same todo item can appear in more than one file, since the filename prepend creates uniqueness.   How to Enable  The following must appear in a source\/outline.merge.json to enable todo aggregation.  {     \"settings\": {         \"tasklist\": {             \"aggregate\": true         }     } }   An Example File With Tasks  # A Page With Tasks  Lorem ipsum dolor sit amet, consectetur adipiscing elit.  - [ ] a task list item - [ ] another task  Praesent at vulputate tellus, vehicula dignissim elit.   Including the Tasklist on Another Page  You can do something like the following in a .twig.md file, and the aggregated tasklist will appear there.  # Roadmap  Here are the todo items left for this project.  {% include('_tasklist.md') %}   Sorting Tasks in the Final List  You can control the order the tasks appear in the aggregated list by using the weight flag @w followed by an int or float number indicating the sort weight.  Lower numbers appear first.  The source file orders are not changed by the use of @w flag.  - [ ] a task list item @w-10 - [ ] a task list item @w10 - [ ] a task list item @w10.1  ","tags":"","url":"ld--todos.html"},{"title":"Token Replacement","text":"  Using frontmatter, you can define tokens in your markdown file that will be replaced during render.  See examples below.  Example 1: Tokens  List your find\/replace tokens in frontmatter under the key tokens:  Here is your markdown document:  --- tokens:     @modified: October 15, 2018     @s1: what-info-do-we-collect --- # PRIVACY NOTICE  Last Modified @modified  * [What Information Do We Collect?](#@s1)  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.  &lt;a name=\"@l2\"&gt;&lt;\/a&gt; ## WHAT INFORMATION DO WE COLLECT?  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.  This document was last updated on {{ modified }}.   Example 2: Twig Style  See how you can use twig-style tokens by replacing the frontmatter tokens with twig.  Notice that the find keys do not include the {{ and }}, however in the body of the document they are present.  Here is your markdown document:  --- twig:     modified: October 15, 2018     l1: what-info-do-we-collect --- # PRIVACY NOTICE  Last Modified {{ modified }}  * [What Information Do We Collect?](#{{ s1 }})  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.  &lt;a name=\"{{ s1 }}\"&gt;&lt;\/a&gt; ## WHAT INFORMATION DO WE COLLECT?  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ac blandit risus. Mauris tempor a lacus a placerat. Vivamus viverra dapibus metus non finibus. Nulla ultricies est nulla, eget efficitur nibh viverra non. Sed sed est viverra nunc malesuada venenatis vitae at tellus. Suspendisse potenti. Morbi non blandit elit, sit amet consectetur mi.  This document was last updated on {{ modified }}.  ","tags":"","url":"ld--tokens.html"},{"title":"Twig","text":"  You may want to dynamically create partials that twig can load during compile.  In a hook file create a partial and save it to:  Any file that you name with ending in .twig.md will be run through the twig processor.  That means that you can use includes like the following:  {% include('my_dynamic_file.md') %}  ","tags":"","url":"ld--twig.html"},{"title":"Search Results","text":" ","tags":"","url":"search--results.html"},{"title":"Structure and Chapters","text":"   To create chapters, name your files as --. In the index pages without chapters will come last.  ","tags":"","url":"structure.html"}]};
